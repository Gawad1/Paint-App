/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontEnd;

import backEnd.AbstractShape;
import backEnd.Shape;
import backEnd.Rectangle;
import backEnd.Triangle;
import backEnd.Node;
import backEnd.Oval;
import backEnd.LineSegment;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.ProcessHandle.current;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


/**
 *
 * @author pc
 */
public class Paint_1 extends javax.swing.JFrame implements Node {

    int noOfSqu = 0;
    int noOfOval = 0;
    int noOfLin = 0;
    int noOfRect = 0;
    int noOfTri = 0;
    private AddOval addOval;
    private AddLine addLine;
    private AddRect addRect;
    private AddSquare addSquare;
    private AddTriangle addTriangle;
    int resizedIndex = -1;
    
   // drawingPanel1 = new paint.DrawingPanel();

    //DrawingPanel drawing = new DrawingPanel();
   
    public Paint_1() {
        initComponents();
        drawingPanel1.setParentNode(this);
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        Copy = new java.awt.Button();
        drawingPanel1 = new frontEnd.DrawingPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select a shape");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Shape" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Oval");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Line Segment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Rectangle");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 255, 102));
        jButton5.setText("Colorize");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 0, 0));
        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Triangle");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        Copy.setBackground(new java.awt.Color(255, 0, 51));
        Copy.setLabel("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });

        drawingPanel1.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseDragged(evt);
            }
        });
        drawingPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout drawingPanel1Layout = new javax.swing.GroupLayout(drawingPanel1);
        drawingPanel1.setLayout(drawingPanel1Layout);
        drawingPanel1Layout.setHorizontalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );
        drawingPanel1Layout.setVerticalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 424, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("save ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Copy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton7)))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(29, 29, 29)
                        .addComponent(jButton6)
                        .addGap(21, 21, 21)
                        .addComponent(Copy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "you have to select a shape!");
            return;
        }
        
        int i = jComboBox1.getSelectedIndex() - 1;
        Shape shape = drawingPanel1.getShapes()[i];
        drawingPanel1.removeShape(shape);
        drawingPanel1.refresh(drawingPanel1.getGraphics());
        jComboBox1.removeItemAt(i + 1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.setVisible(false);
        if (addOval == null) {
            addOval = new AddOval();
        }
        addOval.setVisible(true);
        addOval.setParentNode(this);
    }

    public void AddOval(Oval c) {
        drawingPanel1.addShape(c);
        c.draw(drawingPanel1.getGraphics());
        jComboBox1.addItem("Oval_" + noOfOval++);
        
       
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        if (jComboBox1.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "You have to select a shape!");
            return;
        }
        int i = jComboBox1.getSelectedIndex() - 1;
        Shape shape = drawingPanel1.getShapes()[i];
        Color color = JColorChooser.showDialog(null, "Choose Color", shape.getColor());
        shape.setColor(color);
        Color fillColor = JColorChooser.showDialog(null, "Choose Fill Color", shape.getFillColor());
        shape.setFillColor(fillColor);
        drawingPanel1.update(drawingPanel1.getGraphics());
        drawingPanel1.refresh(drawingPanel1.getGraphics());

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        if (addLine == null) {
            addLine = new AddLine();
        }
        addLine.setVisible(true);
        addLine.setParentNode(this);
    }

    public void AddLine(LineSegment l) {
        drawingPanel1.addShape(l);
        l.draw(drawingPanel1.getGraphics());
        jComboBox1.addItem("Line_" + noOfLin++);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
        if (addRect == null) {
            addRect = new AddRect();
        }
        addRect.setParentNode(this);
        addRect.setVisible(true);
        
        
    }//GEN-LAST:event_jButton4ActionPerformed
    public void AddRectangle(Rectangle rect) {
        drawingPanel1.addShape(rect);
        rect.draw(drawingPanel1.getGraphics());
        jComboBox1.addItem("Rectangle_" + noOfRect++);

        drawingPanel1.refresh(drawingPanel1.getGraphics());

    }
    public void AddSquare(Rectangle rect) {
        drawingPanel1.addShape(rect);
        rect.draw(drawingPanel1.getGraphics());
        jComboBox1.addItem("Square_" + noOfRect++);

        drawingPanel1.refresh(drawingPanel1.getGraphics());

    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        this.setVisible(false);
        if (addTriangle == null) {
            addTriangle = new AddTriangle();
        }
        addTriangle.setVisible(true);
        addTriangle.setParentNode(this);
    }

    public void AddTriangle(Triangle t) {
        drawingPanel1.addShape(t);
        t.draw(drawingPanel1.getGraphics());
        jComboBox1.addItem("Triangle_" + noOfTri);
        noOfTri++;

    }//GEN-LAST:event_jButton7ActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    

    }//GEN-LAST:event_formMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
       Shape current;
        if (jComboBox1.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "You have to select a shape!");
            return;
        }int i =jComboBox1.getSelectedIndex()-1;
       current=drawingPanel1.shapes.get(i);
          if(current instanceof LineSegment ){
        Point start=current.getPosition();
       Point end =((LineSegment)current).getEndpoint();
       LineSegment l=new LineSegment();
       l.setEndpoint(end);
       l.setPosition(start);
         
            l.setColor(current.getColor());
            drawingPanel1.addShape(l);
            drawingPanel1.repaint();
          jComboBox1.addItem("Line_" + noOfLin++);
          
      }
          else if(current instanceof Oval){
      Point position=current.getPosition();
      int vR=((Oval)current).getHeight();
      int hR = ((Oval)current).getWidth();
      Oval o= new Oval();
      o.setWidth(hR);
      o.setHeight(vR);
      o.setPosition(position);
      o.setColor(current.getColor());
      o.setFillColor(current.getFillColor());
      drawingPanel1.addShape(o);
      drawingPanel1.repaint();
     jComboBox1.addItem("Oval_" + noOfOval++);
    
      } else if (current instanceof Rectangle){
      Point position =current.getPosition();
      int w=((Rectangle)current).getWidth();
      int h=((Rectangle)current).getLength();
       Rectangle r = new Rectangle();
       r.setLength(h);
       r.setWidth(WIDTH);
       r.setPosition(position);
      r.setColor(current.getColor());
      r.setFillColor(current.getFillColor());
      drawingPanel1.addShape(r);
      drawingPanel1.repaint();
      jComboBox1.addItem("Rectangle_" + noOfRect++);
        
      }else if (current instanceof Triangle)
      {
        Point p1 =current.getPosition();
        Point p2 = ((Triangle)current).getPoint2();
        Point p3 = ((Triangle)current).getPoint3();
        Triangle t = new Triangle();
        t.setPosition(p1);
        t.setPoint2(p2);
        t.setPoint3(p3);
        t.setFillColor(current.getFillColor());
        t.setColor(current.getColor());
        drawingPanel1.addShape(t);
        drawingPanel1.repaint();
        jComboBox1.addItem("Triangle_" + noOfTri++);
       
         }// TODO add your handling code here:
    }//GEN-LAST:event_CopyActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
drawingPanel1.shapes.removeAll(drawingPanel1.shapes);
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Choose Shape");
            int noOfSqu = 0;
    int noOfOval = 0;
    int noOfLin = 0;
    int noOfRect = 0;
    int noOfTri = 0;
        drawingPanel1.repaint();
        JFileChooser dialog = new JFileChooser();
        dialog.setDialogTitle("Load");
        dialog.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("json files", "json");
        dialog.addChoosableFileFilter(restrict);
        String path = null;
        if(dialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            path = dialog.getSelectedFile().getAbsolutePath();
        }
        try{
            JSONParser parser = new JSONParser();
            org.json.simple.JSONArray ar = (org.json.simple.JSONArray) parser.parse(new FileReader(path));
            for(int i=0;i<ar.size();i++){
                int x =  ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"positionX")).intValue();
                int y =  ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"positionY")).intValue();
                Color fillcolor = new Color(((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"fillColor")).intValue());
                Color bordercolor = new Color(((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"borderColor")).intValue());
                switch((String)((org.json.simple.JSONObject)ar.get(i)).get((String)"type")){
                    case "Rectangle" -> {
                        int width = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"width")).intValue();
                        int height = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"height")).intValue();
                        Rectangle r = new Rectangle();
                        r.setPosition(new Point(x,y));
                        r.setWidth(width);
                        r.setLength(height);
                        r.setFillColor(fillcolor);
                        r.setColor(bordercolor);
                        AddRectangle(r);
                        break;
                    }
                    case "Oval" -> {
                        int Hradius = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"Hradius")).intValue();
                        int Vradius = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"Vradius")).intValue();
                        Oval c=new Oval();
                        c.setPosition(new Point(x,y));
                        c.setWidth(Hradius);
                        c.setHeight(Vradius);
                        c.setFillColor(fillcolor);
                        c.setColor(bordercolor);
                        AddOval(c);
                        break;
                    }
                    case "LineSegment" -> {
                        int x2 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position2X")).intValue();
                        int y2 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position2Y")).intValue();
                        LineSegment l= new LineSegment();
                        l.setPosition(new Point(x,y));
                        l.setEndpoint(new Point (x2,y2));
                        l.setColor(bordercolor);
                        AddLine(l);
                        break;
                    }
                    case "Triangle" -> {
                        int x2 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position2X")).intValue();
                        int y2 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position2Y")).intValue();
                        int x3 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position3X")).intValue();
                        int y3 = ((Long)((org.json.simple.JSONObject)ar.get(i)).get((String)"position3Y")).intValue();
                        Triangle t= new Triangle();
                        t.setPosition(new Point(x,y));
                        t.setPoint2(new Point (x2,y2));
                        t.setPoint3(new Point(x3,y3));
                        t.setColor(bordercolor);
                        t.setFillColor(fillcolor);
                        AddTriangle(t);
                        break;
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser dialog = new JFileChooser();
        dialog.setDialogTitle("Save");
        dialog.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("json files", "json");
        dialog.addChoosableFileFilter(restrict);
        String path = null;
        if(dialog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION){
            path = dialog.getSelectedFile().getAbsolutePath();
        }
        System.out.println(path);
        JSONArray ar = new JSONArray();
        
        try(FileWriter file = new FileWriter(path)){
        for(int i=0;i<drawingPanel1.shapes.size();i++){
            JSONObject obj = new JSONObject();
            obj.put("positionX", drawingPanel1.shapes.get(i).getPosition().x);
            obj.put("positionY", drawingPanel1.shapes.get(i).getPosition().y);
            obj.put("fillColor", drawingPanel1.shapes.get(i).getFillColor().getRGB());
            obj.put("borderColor", drawingPanel1.shapes.get(i).getColor().getRGB());
            if(drawingPanel1.shapes.get(i) instanceof Oval oval) {
                    obj.put("type", "Oval");
                    obj.put("Hradius", oval.getWidth());
                    obj.put("Vradius", oval.getHeight());
                }else if(drawingPanel1.shapes.get(i) instanceof LineSegment lineSegment){
                    obj.put("type", "LineSegment");
                    obj.put("position2X", lineSegment.getEndpoint().x);
                    obj.put("position2Y", lineSegment.getEndpoint().y);
                }else if(drawingPanel1.shapes.get(i) instanceof Rectangle rectangle){
                    obj.put("type", "Rectangle");
                    obj.put("width", rectangle.getWidth());
                    obj.put("height", rectangle.getLength());
                }else if(drawingPanel1.shapes.get(i) instanceof Triangle triangle){
                    obj.put("type", "Triangle");
                    obj.put("position2X", triangle.getPoint2().x);
                    obj.put("position2Y", triangle.getPoint2().y);
                    obj.put("position3X", triangle.getPoint3().x);
                    obj.put("position3Y", triangle.getPoint3().y);
                }
            ar.add(obj);    
        }
        file.write(ar.toString());
        } catch (IOException | NullPointerException ex) {
            ex.printStackTrace();
        }
        // TODO add your handling code here:
         
   
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void drawingPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MousePressed
        // TODO add your handling code here:
         Shape current;                            
        for (int i = this.drawingPanel1.shapes.size() - 1; i >= 0; i--) {
           ((AbstractShape) drawingPanel1.shapes.get(i)).setSelected(false);
        }
        Point p = evt.getPoint();
        int c = jComboBox1.getSelectedIndex();
        if (c != 0) {
            current = drawingPanel1.shapes.get(c - 1);
            if (current instanceof Rectangle) {
                Rectangle r = (Rectangle) current;
                if (r.isUpperLeft(p) || r.isUpperRight(p) || r.isLowerRight(p) || r.isLowerLeft(p)) {
                    r.setDraggingPoint(p);
                    resizedIndex = c - 1;
                    return;
                }
            }
            if (current instanceof Oval) {
                Oval o = (Oval) current;
                if (o.isUpperLeft(p) || o.isUpperRight(p) || o.isLowerRight(p) || o.isLowerLeft(p)) {
                    o.setDraggingPoint(p);
                    resizedIndex = c - 1;
                    return;
                }
            }
            if (current instanceof LineSegment) {
                LineSegment l = (LineSegment) current;
                if (l.isStartPoint(p) || l.isEndPoint(p)) {
                    l.setDraggingPoint(p);
                    resizedIndex = c - 1;
                    return;
                }
            }
            if (current instanceof Triangle) {
                Triangle T = (Triangle) current;
                if (T.isPoint1(p) || T.isPoint2(p) || T.isPoint3(p)) {
                    T.setDraggingPoint(p);
                    resizedIndex = c - 1;
                    return;
                }
            }
        }
        resizedIndex = -1;
        for (int i = this.drawingPanel1.shapes.size() - 1; i >= 0; i--) {
            if (((AbstractShape)this.drawingPanel1.shapes.get(i)).contains(evt.getPoint())) {
                jComboBox1.setSelectedIndex(i + 1);
                ((AbstractShape)drawingPanel1.shapes.get(i)).setSelected(true);
               ((AbstractShape) this.drawingPanel1.shapes.get(i)).setDraggingPoint(evt.getPoint());
                return;
            }
            jComboBox1.setSelectedIndex(0);


        }
    }//GEN-LAST:event_drawingPanel1MousePressed

    private void drawingPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseDragged
        // TODO add your handling code here:
     Point p = evt.getPoint();
        if (resizedIndex != -1) {
            ((AbstractShape)drawingPanel1.shapes.get(resizedIndex)).resize(p);
           ((AbstractShape) drawingPanel1.shapes.get(resizedIndex)).setDraggingPoint(p);
            repaint();
        } else if (jComboBox1.getSelectedIndex() != 0) {
           ((AbstractShape) this.drawingPanel1.shapes.get(jComboBox1.getSelectedIndex() - 1)).moveTo(p);
            ((AbstractShape)this.drawingPanel1.shapes.get(jComboBox1.getSelectedIndex() - 1)).setDraggingPoint(p);
            repaint();
        }   
    }//GEN-LAST:event_drawingPanel1MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paint_1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paint_1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paint_1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paint_1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paint_1().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Copy;
    private frontEnd.DrawingPanel drawingPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setParentNode(Node parent) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
