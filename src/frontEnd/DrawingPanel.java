/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontEnd;

import backEnd.Shape;
import backEnd.Node;
import backEnd.DrawingEngine;
import backEnd.AbstractShape;
import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * @author ADMIN
 */
public class DrawingPanel extends javax.swing.JPanel implements DrawingEngine,Node {

    /**
     * Creates new form DrawingPanel
     */
   ArrayList<Shape> shapes = new ArrayList<>();
  int selectedIndex = -1;
    int resizedIndex = -1;
    Node parent;

    public DrawingPanel() {
        initComponents();
       // this.getGraphics().drawRect(20, 20, 70, 100);
    }


    @Override
    public Graphics getGraphics() {
        return super.getGraphics(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void addShape(Shape shape) {
 shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
    for (int i = 0; i < shapes.size(); i++) {
            if (shapes.get(i) == shape) {
                shapes.remove(i);
            }
        }
        
        
        }

    @Override
    public Shape[] getShapes() {
        AbstractShape[] shape = new AbstractShape[shapes.size()];
        shape = shapes.toArray(shape);
        return shape;    }

    @Override
    public void refresh(Graphics p) {
for (int i = 0; i < shapes.size(); i++) {
            shapes.get(i).draw(p);
        }
        this.repaint();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        refresh(g);
    }


    @Override
    public void setParentNode(Node parent) {
this.parent=parent;    }

    @Override
    public Node getParentNode() {
return parent;    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
